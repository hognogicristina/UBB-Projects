@startuml
class CatsController {
    + getCat()
    + genCat()
    + getOneCat()
    + createCat()
    + deleteCat()
    + updateCat()
    + filterCat()
    + getStatisticsName()
    + getStatisticsBreed()
}

class CatsRepository {
    + genCat()
    + getCat()
    + getOneCat()
    + createCat()
    + deleteCat()
    + updateCat()
    + filterCatByWeight()
    + getStatisticReportName()
    + getStatisticReportBreed()
}

class CatsDatabasse {
    + getCats()
    + getOneCatById()
    + countRowsCats()
    + addCat()
    + deleteCat()
    + updateCat()
    + filterCatByWeight()
    + getByTypeCat()
    + getStatisticReportName()
    + getStatisticReportBreed()
}

class CatsModel {
    int id
    String name
    int age
    String color
    String breed
    int weight
    int ownerId
}

class OwnersController {
    + genOwner()
    + getOwner()
    + getOneOwner()
    + createOwner()
    + deleteOwner()
    + updateOwner()
}

class OwnersRepository {
    + genOwner()
    + getOwner()
    + getOneOwner()
    + createOwner()
    + deleteOwner()
    + updateOwner()
}

class OwnersDatabasse {
    + getOwners()
    + getOneOwnerById()
    + countRowsOwner()
    + addOwner()
    + deleteOwner()
    + updateOwner()
    + getByTypeOwner()
}

class OwnersModel {
    int id
    String firstName
    String lastName
    String address
    int phone
    String email
}

class FoodsController {
    + getFood()
    + genFood()
    + getOneFood()
    + createFood()
    + deleteFood()
    + updateFood()
}

class FoodsRepository {
    + genFood()
    + getFood()
    + getOneFood()
    + createFood()
    + deleteFood()
    + updateFood()
}

class FoodsDatabasse {
    + getFoods()
    + getOneFoodById()
    + countRowsFood()
    + addFood()
    + deleteFood()
    + updateFood()
}

class FoodsModel {
    int id
    String name
    String brand
    int price
    int quantity
    String type   
}

class FoodsForCatsController {
    + getFoodCat()
    + genFoodCat()
    + getOneFoodCat()
    + createFoodCat()
    + deleteFoodCat()
    + updateFoodCat()
}

class FoodsForCatsRepository {
    + genFoodCat()
    + getFoodCat()
    + getOneFoodCat()
    + createFoodCat()
    + deleteFoodCat()
    + updateFoodCat()
}

class FoodsForCatsDatabasse {
    + getFoodCat()
    + getOneFoodCatById()
    + countRowsFoodCat()
    + addFoodCat()
    + deleteFoodCat()
    + updateFoodCat()
}

class FoodsForCatsModel {
    int id
    int catId
    int foodId
    datetime purchased
    String place
}

CatsController -> CatsRepository 
CatsRepository --> CatsDatabasse
CatsDatabasse --> CatsModel

OwnersController -> OwnersRepository
OwnersRepository --> OwnersDatabasse
OwnersDatabasse --> OwnersModel

FoodsController -> FoodsRepository
FoodsRepository --> FoodsDatabasse
FoodsDatabasse --> FoodsModel

FoodsForCatsController -> FoodsForCatsRepository
FoodsForCatsRepository --> FoodsForCatsDatabasse
FoodsForCatsDatabasse --> FoodsForCatsModel

@enduml