%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "lang.tab.h"
int lines = 1;
%}

%option noyywrap
%option caseless

DIGIT [0-9]
NON_ZERO_DIGIT [1-9]
INT_CONSTANT [+-]?{NON_ZERO_DIGIT}{DIGIT}*|0
LETTER [a-zA-Z_]
SIGNS [ !#%^*+-/<=>_.,:;]
STRING_CONSTANT (\"({LETTER}|{DIGIT}|_|{SIGNS})*\")
IDENTIFIER (#|{LETTER})({LETTER}|{DIGIT})*
BAD_IDENTIFIER ({DIGIT})+(#|{LETTER})+({LETTER}|{DIGIT})*

%%

"prog" { printf("reserved word: %s\n", yytext); return PROG; }
"int" { printf("reserved word: %s\n", yytext); return INT; }
"real" { printf("reserved word: %s\n", yytext); return REAL; }
"str" { printf("reserved word: %s\n", yytext); return STR; }
"char" { printf("reserved word: %s\n", yytext); return CHAR; }
"bool" { printf("reserved word: %s\n", yytext); return BOOL; }
"read" { printf("reserved word: %s\n", yytext); return READ; }
"if" { printf("reserved word: %s\n", yytext); return IF; }
"else" { printf("reserved word: %s\n", yytext); return ELSE; }
"write" { printf("reserved word: %s\n", yytext); return WRITE; }
"while" { printf("reserved word: %s\n", yytext); return WHILE; }
"arr" { printf("reserved word: %s\n", yytext); return ARR; }
"sys" { printf("reserved word: %s\n", yytext); return SYS; }
"and" { printf("reserved word: %s\n", yytext); return AND; }
"or" { printf("reserved word: %s\n", yytext); return OR; }
"rad" { printf("reserved word: %s\n", yytext); return RAD; }

"+" { printf("operator: %s\n", yytext); return PLUS; }
"-" { printf("operator: %s\n", yytext); return MINUS; }
"*" { printf("operator: %s\n", yytext); return TIMES; }
"/" { printf("operator: %s\n", yytext); return DIV; }
"%" { printf("operator: %s\n", yytext); return MOD; }
">=" { printf("operator: %s\n", yytext); return BIGGEREQ; }
"<=" { printf("operator: %s\n", yytext); return LESSEQ; }
">" { printf("operator: %s\n", yytext); return BIGGER; }
"<" { printf("operator: %s\n", yytext); return LESS; }
"==" { printf("operator: %s\n", yytext); return EQQ; }
"=" { printf("operator: %s\n", yytext); return EQ; }
"!=" { printf("operator: %s\n", yytext); return NEQ; }

"[" { printf("separator: %s\n", yytext); return SQBRACKETOPEN; }
"]" { printf("separator: %s\n", yytext); return SQBRACKETCLOSE; }
"(" { printf("separator: %s\n", yytext); return OPEN; }
")" { printf("separator: %s\n", yytext); return CLOSE; }
"{" { printf("separator: %s\n", yytext); return BRACKETOPEN; }
"}" { printf("separator: %s\n", yytext); return BRACKETCLOSE; }
"." { printf("separator: %s\n", yytext); return DOT; }
"," { printf("separator: %s\n", yytext); return COMMA; }
":" { printf("separator: %s\n", yytext); return COLON; }
";" { printf("separator: %s\n", yytext); return SEMICOLON; }
"end" { printf("separator: %s\n", yytext); return END_BLOCK; }
"begin" { printf("separator: %s\n", yytext); return BEGIN_BLOCK; }
"endl" { printf("separator: %s\n", yytext); return ENDL; }

{IDENTIFIER} { printf("identifier: %s\n", yytext); return IDENTIFIER; }

{BAD_IDENTIFIER} { printf("Error at token %s at line %d\n", yytext, lines); return -1; }

{INT_CONSTANT} { printf("integer constant: %s\n", yytext); return INTCONSTANT; }

{STRING_CONSTANT} { printf("string constant: %s\n", yytext); return STRINGCONSTANT; }

[ \t]+ {}

"//"(.)*[\n]+ {++lines;}


[\n]+ {++lines;}

. {printf("Error at token %s at line %d\n", yytext, lines); exit(1);}

%%