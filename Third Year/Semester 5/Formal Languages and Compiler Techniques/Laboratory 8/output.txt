p1.txt
RESERVED WORD: prog
SEPARATORS: {
IDENTIFIER: a
SEPARATORS: :
RESERVED WORD: int
IDENTIFIER: #b
SEPARATORS: :
RESERVED WORD: int
IDENTIFIER: c
SEPARATORS: :
RESERVED WORD: int
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: read
SEPARATORS: (
IDENTIFIER: a
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: read
SEPARATORS: (
IDENTIFIER: #b
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: read
SEPARATORS: (
IDENTIFIER: c
SEPARATORS: )
IDENTIFIER: #smallest
SEPARATORS: :
RESERVED WORD: int
IDENTIFIER: #smallest
OPERATOR: =
IDENTIFIER: a
RESERVED WORD: if
IDENTIFIER: #smallest
OPERATOR: >
IDENTIFIER: #b
SEPARATORS: begin
SEPARATORS: :
IDENTIFIER: #smallest
OPERATOR: =
IDENTIFIER: #b
SEPARATORS: end
SEPARATORS: ;
RESERVED WORD: if
IDENTIFIER: #smallest
OPERATOR: >
IDENTIFIER: c
SEPARATORS: begin
SEPARATORS: :
IDENTIFIER: #smallest
OPERATOR: =
IDENTIFIER: c
SEPARATORS: end
SEPARATORS: ;
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
IDENTIFIER: #smallest
SEPARATORS: )
SEPARATORS: }

p1err.txt:
RESERVED WORD: prog
SEPARATORS: {
IDENTIFIER: a
SEPARATORS: :
RESERVED WORD: int
Error at token 1b at line 4

p2.txt:
RESERVED WORD: prog
SEPARATORS: {
IDENTIFIER: x
SEPARATORS: :
RESERVED WORD: int
IDENTIFIER: i
SEPARATORS: :
RESERVED WORD: int
IDENTIFIER: #prime
SEPARATORS: :
RESERVED WORD: int
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: read
SEPARATORS: (
IDENTIFIER: x
SEPARATORS: )
IDENTIFIER: i
OPERATOR: =
INTEGER CONSTANT: 2
IDENTIFIER: #prime
OPERATOR: =
INTEGER CONSTANT: 1
RESERVED WORD: while
IDENTIFIER: i
OPERATOR: *
IDENTIFIER: i
OPERATOR: <
IDENTIFIER: x
RESERVED WORD: and
IDENTIFIER: #prime
OPERATOR: ==
INTEGER CONSTANT: 1
SEPARATORS: begin
SEPARATORS: :
RESERVED WORD: if
IDENTIFIER: x
OPERATOR: %
IDENTIFIER: i
OPERATOR: ==
INTEGER CONSTANT: 0
SEPARATORS: begin
SEPARATORS: :
IDENTIFIER: #prime
OPERATOR: =
INTEGER CONSTANT: 0
RESERVED WORD: else
SEPARATORS: begin
SEPARATORS: :
IDENTIFIER: i
OPERATOR: =
IDENTIFIER: i
OPERATOR: +
INTEGER CONSTANT: 1
SEPARATORS: end
SEPARATORS: ;
SEPARATORS: end
SEPARATORS: ;
RESERVED WORD: if
IDENTIFIER: #prime
OPERATOR: ==
INTEGER CONSTANT: 1
SEPARATORS: begin
SEPARATORS: :
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
STRING CONSTANT: "The number is prime"
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
SEPARATORS: endl
SEPARATORS: )
RESERVED WORD: else
SEPARATORS: begin
SEPARATORS: :
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
STRING CONSTANT: "The number is not prime"
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
SEPARATORS: endl
SEPARATORS: )
SEPARATORS: end
SEPARATORS: ;
IDENTIFIER: n
SEPARATORS: :
RESERVED WORD: int
IDENTIFIER: m
SEPARATORS: :
RESERVED WORD: int
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
STRING CONSTANT: "n = "
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: read
SEPARATORS: (
IDENTIFIER: n
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
STRING CONSTANT: "m = "
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: read
SEPARATORS: (
IDENTIFIER: m
SEPARATORS: )
IDENTIFIER: remind
SEPARATORS: :
RESERVED WORD: int
RESERVED WORD: while
IDENTIFIER: m
OPERATOR: !=
INTEGER CONSTANT: 0
SEPARATORS: begin
SEPARATORS: :
IDENTIFIER: remind
OPERATOR: =
IDENTIFIER: n
OPERATOR: %
IDENTIFIER: m
IDENTIFIER: n
OPERATOR: =
IDENTIFIER: m
IDENTIFIER: m
OPERATOR: =
IDENTIFIER: remind
SEPARATORS: end
SEPARATORS: ;
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
STRING CONSTANT: "gcd = "
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
IDENTIFIER: n
SEPARATORS: )
IDENTIFIER: a
SEPARATORS: :
RESERVED WORD: int
IDENTIFIER: b
SEPARATORS: :
RESERVED WORD: int
IDENTIFIER: c
SEPARATORS: :
RESERVED WORD: int
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
STRING CONSTANT: "The equation is ax^2 + bx + c = 0"
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
SEPARATORS: endl
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
STRING CONSTANT: "a = "
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: read
SEPARATORS: (
IDENTIFIER: a
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
STRING CONSTANT: "b = "
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: read
SEPARATORS: (
IDENTIFIER: b
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
STRING CONSTANT: "c = "
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: read
SEPARATORS: (
IDENTIFIER: c
SEPARATORS: )
IDENTIFIER: #delta
SEPARATORS: :
RESERVED WORD: int
IDENTIFIER: #delta
OPERATOR: =
IDENTIFIER: b
OPERATOR: *
IDENTIFIER: b
OPERATOR: -
INTEGER CONSTANT: 4
OPERATOR: *
IDENTIFIER: a
OPERATOR: *
IDENTIFIER: c
IDENTIFIER: sol1
SEPARATORS: :
RESERVED WORD: real
IDENTIFIER: sol2
SEPARATORS: :
RESERVED WORD: real
RESERVED WORD: if
IDENTIFIER: #delta
OPERATOR: <
INTEGER CONSTANT: 0
SEPARATORS: begin
SEPARATORS: :
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
STRING CONSTANT: "No real solutions."
SEPARATORS: )
SEPARATORS: end
SEPARATORS: ;
RESERVED WORD: if
IDENTIFIER: #delta
OPERATOR: ==
INTEGER CONSTANT: 0
SEPARATORS: begin
SEPARATORS: :
IDENTIFIER: sol1
OPERATOR: =
SEPARATORS: (
OPERATOR: -
IDENTIFIER: b
SEPARATORS: )
OPERATOR: /
SEPARATORS: (
INTEGER CONSTANT: 2
OPERATOR: *
IDENTIFIER: a
SEPARATORS: )
SEPARATORS: end
SEPARATORS: ;
IDENTIFIER: sol1
OPERATOR: =
SEPARATORS: (
SEPARATORS: (
OPERATOR: -
IDENTIFIER: b
SEPARATORS: )
OPERATOR: -
SEPARATORS: (
RESERVED WORD: rad
SEPARATORS: (
IDENTIFIER: #delta
SEPARATORS: )
SEPARATORS: )
SEPARATORS: )
OPERATOR: /
SEPARATORS: (
INTEGER CONSTANT: 2
OPERATOR: *
IDENTIFIER: a
SEPARATORS: )
IDENTIFIER: sol2
OPERATOR: =
SEPARATORS: (
SEPARATORS: (
OPERATOR: -
IDENTIFIER: b
SEPARATORS: )
OPERATOR: +
SEPARATORS: (
RESERVED WORD: rad
SEPARATORS: (
IDENTIFIER: #delta
SEPARATORS: )
SEPARATORS: )
SEPARATORS: )
OPERATOR: /
SEPARATORS: (
INTEGER CONSTANT: 2
OPERATOR: *
IDENTIFIER: a
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
STRING CONSTANT: "2 solutions "
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
IDENTIFIER: sol1
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
STRING CONSTANT: " and "
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
IDENTIFIER: sol2
SEPARATORS: )
SEPARATORS: }

p3.txt:
RESERVED WORD: prog
SEPARATORS: {
IDENTIFIER: n
SEPARATORS: :
RESERVED WORD: int
IDENTIFIER: sum
SEPARATORS: :
RESERVED WORD: int
IDENTIFIER: i
SEPARATORS: :
RESERVED WORD: int
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: read
SEPARATORS: (
IDENTIFIER: n
SEPARATORS: )
IDENTIFIER: sum
OPERATOR: =
INTEGER CONSTANT: 0
IDENTIFIER: i
OPERATOR: =
INTEGER CONSTANT: 1
RESERVED WORD: while
IDENTIFIER: i
OPERATOR: <=
IDENTIFIER: n
SEPARATORS: begin
SEPARATORS: :
IDENTIFIER: sum
OPERATOR: =
IDENTIFIER: sum
OPERATOR: +
IDENTIFIER: i
IDENTIFIER: i
OPERATOR: =
IDENTIFIER: i
OPERATOR: +
INTEGER CONSTANT: 1
SEPARATORS: end
SEPARATORS: ;
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
STRING CONSTANT: "Sum: "
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
IDENTIFIER: sum
SEPARATORS: )
IDENTIFIER: #nr
SEPARATORS: :
RESERVED WORD: arr
SEPARATORS: (
RESERVED WORD: int
SEPARATORS: )
SEPARATORS: [
INTEGER CONSTANT: 10
SEPARATORS: ]
IDENTIFIER: max
SEPARATORS: :
RESERVED WORD: int
IDENTIFIER: min
SEPARATORS: :
RESERVED WORD: int
IDENTIFIER: num
SEPARATORS: :
RESERVED WORD: int
IDENTIFIER: i
SEPARATORS: :
RESERVED WORD: int
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: read
SEPARATORS: (
IDENTIFIER: #nr
SEPARATORS: )
IDENTIFIER: max
OPERATOR: =
INTEGER CONSTANT: -999999
IDENTIFIER: min
OPERATOR: =
INTEGER CONSTANT: 999999
RESERVED WORD: while
IDENTIFIER: i
OPERATOR: <
INTEGER CONSTANT: 10
SEPARATORS: begin
SEPARATORS: :
IDENTIFIER: num
OPERATOR: =
IDENTIFIER: #nr
SEPARATORS: [
IDENTIFIER: i
SEPARATORS: ]
RESERVED WORD: if
IDENTIFIER: num
OPERATOR: >
IDENTIFIER: max
SEPARATORS: begin
SEPARATORS: :
IDENTIFIER: max
OPERATOR: =
IDENTIFIER: num
SEPARATORS: end
SEPARATORS: ;
RESERVED WORD: if
IDENTIFIER: num
OPERATOR: <
IDENTIFIER: min
SEPARATORS: begin
SEPARATORS: :
IDENTIFIER: min
OPERATOR: =
IDENTIFIER: num
SEPARATORS: end
SEPARATORS: ;
IDENTIFIER: i
OPERATOR: =
IDENTIFIER: i
OPERATOR: +
INTEGER CONSTANT: 1
SEPARATORS: end
SEPARATORS: ;
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
STRING CONSTANT: "Max: "
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
IDENTIFIER: max
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
STRING CONSTANT: "Min: "
SEPARATORS: )
RESERVED WORD: sys
SEPARATORS: .
RESERVED WORD: write
SEPARATORS: (
IDENTIFIER: min
SEPARATORS: )
SEPARATORS: }